1. 소스로 문법 리뷰
	1. 주제
		- 사람에 대한 이름/나이 정보를 필요시에 콘솔에 출력
	2. 고민
		- java 로 개발 -> People.java
		- 데이터 : 이름(문자열)/나이(정수) -> 변수 : String name/int age
	3. 데이터 값은 ?
		- 내 친구 두명의 정보를 활용
		- 클래스(People.java)개발
			하나의 클래스 개발 후에 두개의 객체를 만들까?
			친구 수 만큼 개별 자바 클래스 개발?
	4. class 는 설계도 : class기반으로 생성은 객체
		붕어빵 틀 		 : 붕어빵
		건축설계도 	 : 건축물
		
2. 메소드 개발 권장
	1. 명명규칙(이름) : 소문자로 시작, 단 여러 단어가 조합시에는 조합된 단어들 첫 철자만 대문자
		getName() / setName()
	2. 메소드를 호출하는 관점 즉 사용자 관점에서 이름 선정 권장
	3. 기능으로 본 메소드 이름 예시
		- 사용자(호출자)
		1. 이름 정보 주세요
			- 새로운 제공 없이 존재하는 데이터값만 요청
			- argument 불필요 / return 필수
			- String getName(){
			  	...
			  	return "이름값";
			  }
			
		2. 개명했으니 이름 수정해 주세요
			- 새로운 데이터 줄테니 이 정보로 변경
			- argument 필수 
			- void setName(String newName){
			  	이름값 수정
			  }
			  
3. 변수 선언에 따른 구분
	1. 타입에 따른 구분
		기본타입
			int i;
			double d;
		참조타입(객체 관리하는 참조 변수, 객체 타입)
			- class가 존재하는 범위에 한해서만 타입으로 사용 가능
			String s;	API에 String.java제공
			L01Variable l;	L01Variable.java를 사용자 정의로 구성 
			>>? 내가 만든클래스를 어디서나 쓸 수 있나요..? 패키지 안에서는..우선 할 수 있어요!
			
	2. 선언 위치에 따른 구분
		1. 멤버 변수
			- class {} 하위에 선언되는 모든 변수
			- 객체 생성시에 객체 내부에 구성 요소로 생성되는 변수들
			- People의 name과 age변수
			-종류
				1. instance 변수
					- 객체 생성 필수
					- 참조변수명.변수
					
				2. static 변수
					- 객체 생성 옵션
					- 만일 객체들 생성시에는 생성되는 모든 객체가 공유하게 되는 변수
					- class명.변수 / 변수 / 참조변수명.변수
					
			
		2. 로컬 변수(temporary, automatic, stack)
			- 생성자와 메소드 () 즉 argument 또는 {} 내부에 선언되는 변수들
			- 생성자나 메소드 호출시에만 메모리에 생성되었다가 생성자와 메소드가 실행 종료시에 자동 소멸
			
4. People.java 와 Person.java, PersonTest.java 실습 후
	- 하나의 클래스로만 구성했던 구조를 두개의 클래스로 구성
	- 멤버 변수와 로컬 변수 구분 및 생성, 소멸 시점
	- 객체 생성의 개수를 증가해 보면서 하나의 클래스로 다수의 데이터를 관리하는 방법
	- 객체 생성 문법
	- 참조변수의 필요성
	- 메소드 호출 문법
	- 변수들 이름이 동일할 경우 구분하는 this 키워드..
	- jre의 heap(객체만 저장,garbage collector(GC))/stack(로컬변수 저장))
	- eclipse의 자동 완성 기능
	- 명명규칙 및 메소드 개발 형식 체감
	- ...
	- 주제
		- step03 package 사용
		- 자동차 주제로 기존 코드 리뷰하면서 두개의 클래스로 개발
	
5. 정리
	1. 클래스 내부에 구성요소
		멤버 변수/생성자/메소드
	2. 일반 변수와 일반 메소드 호출 시점과 방식
		생성자 - 객체 생성 시점에 호출
		멤버변수와 메소드 - 생성자로 생성한 객체가 생성된 직후에 참조 변수로 호출

6. 필수 암기
	* 변수와 메소드 호출 방식 두가지(예외없음)
	
	1. 일반 변수와 메소드 호출 방식
		- 무조건 객체 생성 직후 참조 변수로 호출
		
	2. static 키워드로 선언된 변수와 메소드 호출 방식
		- 객체 생성과 무관하게 호출 가능
		- 참조 변수없이 호출
		
7. 객체의 필요성
	- Person, People, Student, Customer 등등의 데이터가 중요한 표현은
	클래스 개발 후에 해당 객체 생성이 해당 고객, 학생, 사람 등에 대한 정보를 표현하는 명확한 방식
		: 객체 생성 필수
		: 학사 관리 프로그램
			- 학생 100 : Student.java = 학생 객체 100개 : Student 클래스 하나
			
	- 단순하게 메소드만 호출하기 위해 객체 생성은 큰 의미가 없음
		- 불필요한 객체 수는 가급적 생성 안 하는게 기본

8. 용어
	객체(instance) - 실제 사용 가능하게 메모리에 생성된 객체
	
		
-------------------------------------

미션..

1월 3일/4일 학습내용
- 리뷰
- 만일 선생님 이라면 어떤 예제로 review 요하실 것인지에 대한 고민 후에 간단한 review 예제 만들어 보기
	경우의 수 1 : 완성된 소스를 구멍 또는 문법 오류 발생해서 정상 실행되게 고쳐봐라?
	경우의 수 2 : 미완성 메소드 로직만 제시 후에 완성
	경우의 수 3 : API에 특정 메소드 선정 후에 호출 해서 결과값 출력되게 등등..
	
1. 혼자 - 제출 5시 40분까지



