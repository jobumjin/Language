학습 내용

- 로그인 ~ 로그아웃까지의 상태 유지 기술 학습
	- http 기본 기질은 client 의 접속 상태를 절대 유지하지 않음
	- http://www.naver.com/
		http://shopping.naver.com/home/p/index.naver
			http://swindow.naver.com/style/fashionbrand/list/category
			
			http 기본 기질은 3개의 link를 개별적으로 직접 호출로 간주
			어떤 화면에서 click 해서 화면이동등에 대한 인지를 안 함
			
			개발자들이 상태 유지 및 기록은 100% 코드로 책임
		
- 세션 tracking
	* web page 이동 기술과 무관하게 client의 상태 유지하는 기술
	
	
1. 종류
	1. 세션
		- client의 상태값을 서버 메모리에 저장
		- 저장하는 데이터 타입은 제한이 없음
			(단, 객체 타입만 가능)
		- javax.servlet.http.HttpSession
		
		- 생성 or 이미 생성된 세션 반환
			HttpSession 변수 = request.getSesstion();
		
		- 세션에 데이터 저장
			- setAttribute()로 다수의 데이터들 저장가능
			변수.setAttribute("key", 객체타입다가능);
		
		- 세션에 특정 데이터 삭제
			변수.removeAttribute("key")
		
		- 세션에 저장된 데이터(Object) 반환
			변수.getAttribute("key")
		
		- 세션 무효화
			invalidate()
			
	2. 쿠키
		- client의 상태값을 client 시스템 메모리에 저장
			- ms window의 ms 브라우저로 실행시에는 쿠키 폴더에 저장
			- ms window상에서 타 회사의 브라우저 사용시 브라우저 자체 메모리에 저장 
			
		- 저장하는 데이터 타입 제한있음
			- 단순 문자열 

		- 헨젤과 그래텔 동화책의 컨셉		
		- javax.servlet.http.Cookie
			
			생성 -> 시간 설정 -> client 시스템에 저장
			Cookie c1 = new Cookie("key", "value");
			c1.setMaxAge(초);
			response.addCookie(c1);
			
			활용
			Cookie [] 변수 = request.getCookies();
			반복문 통해서 Cookie 획득
			String getName() - key값 반환
			String getValue() - value 값 반환
			 
			client 시스템에서 이미 저장된 쿠키 삭제시
			동일한 key로 값이 없는 Cookie객체를 다시 재전송 필수
		
	

2. 실습 구조
	login.html -> LoginValidate.java(유효성/redirect) : 이름도 추가 저장 -> Welcome.java -> Logout.java 
	
	2-1. 쿠키 개발 방식
		login.html
		LoginValidate.java
			- 유효하다면 Cookie 생성
			- 데이터 쿠키에 저장
				쿠키에 새로운 정보가 저장 & client 시스템에 쿠키 정보 저장
			- redirect로 Welcome 으로 이동
		Welcome.java
			- 저장된 쿠키를 client 시스템으로 부터 획득
			- 로그아웃 "버튼" 클릭하면서 Logout.java로 이동
		Logout.java 
			- client 시스템에 저장된 쿠키 정보 삭제
			
			
3. 추가 학습
	1. path의 dept를 적용
		http://ip:port/project명/login.html
		http://ip:port/project명/encore/playdata
		http://ip:port/project명/succ
		
	2. 경로 표현 	
		1. 절대 경로
			c://
			d://
			http://.. 
			현 위치가 중요하지 않고 표현법만으로 해당 위치를 절대적으로 인식할수 있는 경로 표현법
			
		2. 상대 경로
			.. 표현식으로 현 위치를 기준으로 설정하는 경로	
			
		
		
		http://ip:port/project명/a/b/c/index.html	
		http://ip:port/project명/a/b/c/test.html	
		
		index.html -> test.html로 이동시
		<a href="test.html	">이동</a>
	
	
		http://ip:port/project명/a/b/c/index.html	
		http://ip:port/project명/a/b/test.html	
		
		index.html -> test.html로 이동시
		<a href="../test.html	">이동</a>

		
		
		http://ip:port/project명/a/b/c/index.html	
		http://ip:port/project명/a/test.html	
		
		index.html -> test.html로 이동시
		<a href="../../test.html	">이동</a>
	
	
============================================================
[JSP 학습]

1. JSP
	java server page의 약어
	view단 개발을 위한 스펙
	html tag / jsp tag / css / java
	java 데이터를 활용가능한 스펙
	확장자 *.jsp
	
	servlet과 달리 타입과 변수 선언 없이도 내장 객체가 자동 생성
		- request/response/session/out/ ...
		
	
	최초 client가 호출시에 jsp -> servlet으로 web server가 자동 변환
	-> 컴파일 -> byte code를 server메모리에 로딩 -> servlet객체 생성후 service() 실행
	

2. JSP tag
	- 브라우저 화면에 데이터 출력 용으로 주로 사용
	- 권장 : jsp는 가급적 순수 자바코드는 지양!!
	- 종류
		1. jsp scripting tag
			- 5가지로 구성 / java 코드 위주로 개발하게 되는 tag
		2. jsp action tag
			- <jsp:tag명>
			- <jsp:forward> : forward(dispatcher) 방식으로 웹 페이지 이동 tag
				: forward tag로 이동되는 최종 jsp에서의 출력 로직은 화면에 실행되나
				이 코드가 구현된 jsp는 실행되기는 하나 브라우저에 출력은 안됨
				결론 : 보이는 화면에 출력하는 내용들은 forward로 이동된 jsp에서 작업하셔야 함			
		3. EL
			- 데이터 출력 tag
			- ${}
		4. JSTL	
			- 자바 코드를 tag화 시키는 최적의 tag
			- 조건 tag/ 반복 tag
			- <c:tag명>


* 참고
	1. web server[Web Application Server(WAS)]
	2. tomcat 이라는 제품
	3. 명칭
		web server = web container = servlet engine ...
	4. 주용도
		servlet 즉 java 기반의 web 서비스 서버

	5. html tag
		- tomcat 관점 : html/css/javascript 모두 다 순수 문자열
		- 브라우저 관점 : 각각의 interpreter 즉 해석 및 실행 엔진 내장
			server는 문자열로 응답
			단 브라우저 html/css/javascript 즉 코드로 문법 검증 후 실행
	
	6. JSP
		-> Servlet으로 자동 변경
			-> server도 결국에 자바
			
		java 코드는 java 실행환경에서 실행
			jdk + tomcat 실행 환경에서 실행 후에 결과 값만 문자열로 브라우저 응답
			jsp tag들은 server단에서 실행 후 결과만 브라우저로 응답


* 고려사항
	1. jsp 코드 수정후에 갱신된 내용으로 service 하려 하는데 갱신이 안 되는 상황이 발생될 때의 해결책
	C:\20220103_lab\03.Web1\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\step04_JSP\org\apache\jsp
	jsp가 servlet으로 변환되어 저장된 위치에서 servlet 삭제 후에 jsp 재실행
